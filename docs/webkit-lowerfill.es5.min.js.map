{"version":3,"sources":["webkit-lowerfill.js"],"names":["document","addEventListener","generateId","Math","random","toString","replace","substr","getPercentage","max","this","min","value","update","range","id","getAttribute","sheet","styleSheet","percentage","call","selector","styles","ruleIndex","Array","from","rules","findIndex","rule","selectorText","deleteRule","insertRule","join","build","set","length","setAttribute","Object","defineProperty","v","setup","target","container","body","HTMLElement","matches","parentNode","querySelectorAll","forEach","documentElement","style","createElement","head","appendChild","MutationObserver","mutations","mutation","addedNodes","node","observe","childList","subtree"],"mappings":"aAMAA,SAAAC,iBAAA,mBAAA,WAOA,SAAAC,IACA,OAAAC,KAAAC,SACAC,SAAA,IACAC,QAAA,WAAA,IACAC,OAAA,EAAA,IAQA,SAAAC,IACA,IAAAC,EAAAC,KAAAD,KAAA,IACAE,EAAAD,KAAAC,KAAA,EAEA,OAAAD,KAAAE,MAAAD,IAAAF,EAAAE,GAAA,IAIA,SAAAE,IACA,IAAAC,EAAAJ,KACAK,EAAAD,EAAAE,aAAA,MACAC,EAAAC,EAAAD,MACAE,EAAAX,EAAAY,KAAAN,GACAO,EAAAA,IAAAN,EAAA,kCACAO,EAAAA,8DAAAH,EAAA,kBAAAA,EAAA,OAGAI,EAAAC,MAAAC,KAAAR,EAAAS,OAAAC,UAAA,SAAAC,GAAA,OAAAA,EAAAC,eAAAR,KAGA,IAAAE,GACAN,EAAAa,WAAAP,GAIAN,EAAAc,YAAAV,EAAAC,GAAAU,KAAA,KAIA,SAAAC,EAAAnB,GACA,GAAA,mBAAAA,EAAAoB,IAAA,CADA,IAKAnB,EAAAD,EAAAC,GAGA,iBAAAA,GAAAA,EAAAoB,QACArB,EAAAsB,aAAA,KAAAlC,KAIAW,EAAAO,KAAAN,GAGAA,EAAAb,iBAAA,QAAAY,GAAA,GAGAC,EAAAb,iBAAA,SAAAY,GAAA,GAIAwB,OAAAC,eAAAxB,EAAA,OACAF,MADA,SACA2B,GACA,OAAAA,GAAA,iBAAAA,IACA7B,KAAAE,MAAA2B,GAEA1B,EAAAO,KAAAV,UAMA,SAAA8B,EAAAC,GACA,IAAAC,EAAA,OAAAD,QAAA,IAAAA,EAAAzC,SAAA2C,KAAAF,EAGAC,aAAAE,cAIAF,EAAAG,QANA,yBAOAH,EAAAA,EAAAI,YAGAtB,MAAAC,KAAAiB,EAAAK,iBAVA,wBAUAC,QAAAf,IA5FA,GAAA,qBAAAjC,SAAAiD,gBAAAC,MAAA,CAaA,IAAAhC,EAAAlB,SAAAmD,cAAA,SACAnD,SAAAoD,KAAAC,YAAAnC,GAkFA,IAAAoC,iBAAA,SAAAC,GACAA,EAAAP,QAAA,SAAAQ,GACAA,EAAAC,WAAAT,QAAA,SAAAU,GACAlB,EAAAkB,SAMAC,QAAA3D,SAAA2C,MACAiB,WAAA,EACAC,SAAA,IAIArB","file":"webkit-lowerfill.es5.min.js","sourcesContent":["// ==========================================================================\n// webkit-lowerfill.js\n// A polyfill for lower fill on `<input type='range'>` in webkit\n// https://github.com/sampotts/webkit-lowerfill\n// ==========================================================================\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // WebKit only\n    if (!('WebkitAppearance' in document.documentElement.style)) {\n        return;\n    }\n\n    // Get a random number\n    function generateId() {\n        return Math.random()\n            .toString(36)\n            .replace(/[^a-z]+/g, '')\n            .substr(0, 10);\n    }\n\n    // Inject the stylesheet\n    const styleSheet = document.createElement('style');\n    document.head.appendChild(styleSheet);\n\n    // Get the value as percentage\n    function getPercentage() {\n        const max = this.max || 100;\n        const min = this.min || 0;\n\n        return (this.value - min) / (max - min) * 100;\n    }\n\n    // Update the fill\n    function update() {\n        const range = this;\n        const id = range.getAttribute('id');\n        const { sheet } = styleSheet;\n        const percentage = getPercentage.call(range);\n        const selector = `#${id}::-webkit-slider-runnable-track`;\n        const styles = `{ background-image: linear-gradient(to right, currentColor ${percentage}%, transparent ${percentage}%) }`;\n\n        // Find old rule if it exists\n        const ruleIndex = Array.from(sheet.rules).findIndex(rule => rule.selectorText === selector);\n\n        // Remove old rule\n        if (ruleIndex !== -1) {\n            sheet.deleteRule(ruleIndex);\n        }\n\n        // Insert new rule\n        sheet.insertRule([selector, styles].join(''));\n    }\n\n    // Build a single input\n    function build(range) {\n        if (typeof range.set === 'function') {\n            return;\n        }\n\n        const { id } = range;\n\n        // Generate an ID if needed\n        if (typeof id !== 'string' || !id.length) {\n            range.setAttribute('id', generateId());\n        }\n\n        // Update on render\n        update.call(range);\n\n        // Listen for user input changes\n        range.addEventListener('input', update, false);\n\n        // List for custom event for programatic updates\n        range.addEventListener('update', update, false);\n\n        // Helper for setting value programatically\n        // Unfortunately watching .value = x is hard\n        Object.defineProperty(range, 'set', {\n            value(v) {\n                if (v !== null && typeof v === 'number') {\n                    this.value = v;\n                }\n                update.call(this);\n            },\n        });\n    }\n\n    // Setup all inputs\n    function setup(target) {\n        let container = target === null || typeof target === 'undefined' ? document.body : target;\n        const selector = 'input[type=\"range\"]';\n\n        if (!(container instanceof HTMLElement)) {\n            return;\n        }\n\n        if (container.matches(selector)) {\n            container = container.parentNode;\n        }\n\n        Array.from(container.querySelectorAll(selector)).forEach(build);\n    }\n\n    // Initialise a new observer\n    const observer = new MutationObserver(mutations => {\n        mutations.forEach(mutation => {\n            mutation.addedNodes.forEach(node => {\n                setup(node);\n            });\n        });\n    });\n\n    // Watch for new inputs added\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n    });\n\n    // Setup\n    setup();\n});\n"]}