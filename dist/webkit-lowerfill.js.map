{"version":3,"sources":["webkit-lowerfill.js"],"names":["document","addEventListener","generateId","Math","random","toString","replace","substr","getPercentage","max","this","min","value","update","range","id","getAttribute","sheet","styleSheet","percentage","call","selector","styles","ruleIndex","Array","from","rules","findIndex","rule","selectorText","deleteRule","insertRule","join","build","set","length","setAttribute","Object","defineProperty","v","setup","target","container","body","matches","parentNode","head","appendChild","MutationObserver","mutations","forEach","mutation","addedNodes","node","observe","childList","subtree"],"mappings":"aAGAA,SAAAC,iBAAA,mBAAA,WASA,SAAAC,IADA,OAAAC,KAAAC,SACAC,SAAA,IACAC,QAAA,WAAA,IAIAC,OAAA,EAAA,IAQA,SAAAC,IACA,IAAAC,EAAAC,KAAAD,KAAA,IACAE,EAAAD,KAAAC,KAAA,EACA,OAAAD,KAAAE,OAAAH,EAAAE,GAAA,IAIA,SAAAE,IACA,IAAAC,EAAAJ,KAFAK,EAAAD,EAAAE,aAAA,MAGAC,EAAAC,EAAAD,MACAE,EAAAX,EAAAY,KAAAN,GACAO,EAAAA,IAAAN,EAAA,kCACAO,EAAAA,8DAAAH,EAAA,kBAAAA,EAAA,OAGAI,EAAAC,MAAAC,KAAAR,EAAAS,OAAAC,UAAA,SAAAC,GAAA,OAAAA,EAAAC,eAAAR,KAGA,IAAAE,GADAN,EAAAa,WAAAP,GAMAN,EAAAc,YAAAV,EAAAC,GAAAU,KAAA,KAIA,SAAAC,EAAAnB,GADA,GAAA,mBAAAA,EAAAoB,IAAA,CACA,IAGAnB,EAAAD,EAAAC,GAKA,iBAAAA,GAAAA,EAAAoB,QADArB,EAAAsB,aAAA,KAAAlC,KAGAW,EAAAO,KAAAN,GAGAD,EAAAA,iBAAAA,QAAAA,GAAAA,GAOAwB,OAAAC,eAAAxB,EAAA,OAFAF,MAEA,SAFA2B,GACA,OAAAA,GAAA,iBAAAA,IACAF,KAAAA,MAAAA,GAEAxB,EAAAO,KAAAV,UAMA,SAAA8B,EAAAC,GAIA,IAAAC,EAAA,OAAAD,QAAA,IAAAA,EAAAzC,SAAA2C,KAAAF,EAAAC,EAAAE,QAFA,yBAGAF,EAAAA,EAAAG,YAGAH,MAAAA,KAAAA,EAAAA,iBANA,wBAMAA,QAAAA,GAnFA1C,GAAAA,qBAAAA,SAAAA,gBAAAA,MAAAA,CAgBAA,IAAAA,EAAAA,SAAAA,cAAAA,SAAAA,SAAA8C,KAAAC,YAAA7B,GAuEA,IAAA8B,iBAAA,SAAAC,GAIAA,EAAAC,QAAA,SAAAC,GAFAA,EAAAC,WAAAF,QAAA,SAAAG,GACAb,EAAAa,SAMAC,QAAAtD,SAAA2C,MAIAY,WAAA,EAFAC,SAAA,IACAhB","file":"webkit-lowerfill.js","sourcesContent":["// ==========================================================================\n// webkit-lowerfill.js\n// A polyfill for lower fill on `<input type='range'>` in webkit\n// ==========================================================================\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // WebKit only\n    if (!('WebkitAppearance' in document.documentElement.style)) {\n        return;\n    }\n\n    // Get a random number\n    function generateId() {\n        return Math.random()\n            .toString(36)\n            .replace(/[^a-z]+/g, '')\n            .substr(0, 10);\n    }\n\n    // Inject the stylesheet\n    const styleSheet = document.createElement('style');\n    document.head.appendChild(styleSheet);\n\n    // Get the value as percentage\n    function getPercentage() {\n        const max = this.max || 100;\n        const min = this.min || 0;\n        return this.value / (max - min) * 100;\n    }\n\n    // Update the fill\n    function update() {\n        const range = this;\n        const id = range.getAttribute('id');\n        const { sheet } = styleSheet;\n        const percentage = getPercentage.call(range);\n        const selector = `#${id}::-webkit-slider-runnable-track`;\n        const styles = `{ background-image: linear-gradient(to right, currentColor ${percentage}%, transparent ${percentage}%) }`;\n\n        // Find old rule if it exists\n        const ruleIndex = Array.from(sheet.rules).findIndex(rule => rule.selectorText === selector);\n\n        // Remove old rule\n        if (ruleIndex !== -1) {\n            sheet.deleteRule(ruleIndex);\n        }\n\n        // Insert new rule\n        sheet.insertRule([selector, styles].join(''));\n    }\n\n    // Build a single input\n    function build(range) {\n        if (typeof range.set === 'function') {\n            return;\n        }\n\n        const { id } = range;\n\n        // Generate an ID if needed\n        if (typeof id !== 'string' || !id.length) {\n            range.setAttribute('id', generateId());\n        }\n\n        // Update right away\n        update.call(range);\n\n        // Listen for user input changes\n        range.addEventListener('input', update, false);\n\n        // Helper for setting value programatically\n        // Unfortunately watching .value = x is hard\n        Object.defineProperty(range, 'set', {\n            value(v) {\n                if (v !== null && typeof v === 'number') {\n                    this.value = v;\n                }\n                update.call(this);\n            },\n        });\n    }\n\n    // Setup all inputs\n    function setup(target) {\n        let container = target === null || typeof target === 'undefined' ? document.body : target;\n        const selector = 'input[type=\"range\"]';\n\n        if (container.matches(selector)) {\n            container = container.parentNode;\n        }\n\n        Array.from(container.querySelectorAll(selector)).forEach(build);\n    }\n\n    // Initialise a new observer\n    const observer = new MutationObserver(mutations => {\n        mutations.forEach(mutation => {\n            mutation.addedNodes.forEach(node => {\n                setup(node);\n            });\n        });\n    });\n\n    // Watch for new inputs added\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n    });\n\n    // Setup\n    setup();\n});\n"]}