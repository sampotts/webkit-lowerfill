{"version":3,"sources":["webkit-lowerfill.js"],"names":["document","addEventListener","documentElement","style","Array","from","events","MutationObserver","mutations","forEach","mutation","addedNodes","node","setup","observe","body","childList","subtree","update","this","setProperty","max","min","value","call","build","range","set","type","Object","defineProperty","v","container","arguments","length","undefined","selector","HTMLElement","matches","parentNode","querySelectorAll"],"mappings":"AAMAA,SAAAC,iBAAA,mBAAA,WAEA,GAAA,qBAAAD,SAAAE,gBAAAC,OAAAC,MAAAC,KAAA,CAKA,IAAAC,GACA,QACA,SACA,UA0DA,IAAAC,iBAAA,SAAAC,GACAA,EAAAC,QAAA,SAAAC,GACAA,EAAAC,WAAAF,QAAA,SAAAG,GACAC,EAAAD,SAMAE,QAAAd,SAAAe,MACAC,WAAA,EACAC,SAAA,IAIAJ,IA9DA,SAAAK,IACAC,KAAAhB,MAAAiB,YAAA,UARA,WACA,IAAAC,EAAAF,KAAAE,KAAA,IACAC,EAAAH,KAAAG,KAAA,EACA,OAAAH,KAAAI,MAAAD,IAAAD,EAAAC,GAAA,KAKAE,KAAAL,MAAA,KAIA,SAAAM,EAAAC,GACA,mBAAAA,EAAAC,MAKAT,EAAAM,KAAAE,GAGApB,EAAAG,QAAA,SAAAmB,GACAF,EAAAzB,iBAAA2B,EAAAV,GAAA,KAKAW,OAAAC,eAAAJ,EAAA,OACAH,MADA,SACAQ,GACA,OAAAA,GAAA,iBAAAA,IACAZ,KAAAI,MAAAQ,GAEAb,EAAAM,KAAAL,UAMA,SAAAN,IAAA,IACAmB,EADAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAjC,SAAAe,KAEAqB,EAAA,sBAEAJ,aAAAK,cAIAL,EAAAM,QAAAF,KACAJ,EAAAA,EAAAO,YAGAnC,MAAAC,KAAA2B,EAAAQ,iBAAAJ,IAAA3B,QAAAgB","file":"webkit-lowerfill.es5.min.js","sourcesContent":["// ==========================================================================\n// webkit-lowerfill.js\n// A polyfill for lower fill on `<input type='range'>` in webkit\n// https://github.com/sampotts/webkit-lowerfill\n// ==========================================================================\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // WebKit only and Array.from needed (modern WebKit)\n    if (!('WebkitAppearance' in document.documentElement.style) || !Array.from) {\n        return;\n    }\n\n    // Events that trigger an update\n    const events = [\n        'input', // Live user input\n        'change', // At end of input\n        'update', // Custom event\n    ];\n\n    // Get the value as percentage\n    function getPercentage() {\n        const max = this.max || 100;\n        const min = this.min || 0;\n        return (this.value - min) / (max - min) * 100;\n    }\n\n    // Update the fill\n    function update() {\n        this.style.setProperty('--value', `${getPercentage.call(this)}%`);\n    }\n\n    // Build a single input\n    function build(range) {\n        if (typeof range.set === 'function') {\n            return;\n        }\n\n        // Update on render\n        update.call(range);\n\n        // Listen for events\n        events.forEach(type => {\n            range.addEventListener(type, update, false);\n        });\n\n        // Helper for setting value programatically\n        // Unfortunately watching .value = x is hard\n        Object.defineProperty(range, 'set', {\n            value(v) {\n                if (v !== null && typeof v === 'number') {\n                    this.value = v;\n                }\n                update.call(this);\n            },\n        });\n    }\n\n    // Setup all inputs\n    function setup(target = document.body) {\n        let container = target;\n        const selector = 'input[type=\"range\"]';\n\n        if (!(container instanceof HTMLElement)) {\n            return;\n        }\n\n        if (container.matches(selector)) {\n            container = container.parentNode;\n        }\n\n        Array.from(container.querySelectorAll(selector)).forEach(build);\n    }\n\n    // Initialise a new observer\n    const observer = new MutationObserver(mutations => {\n        mutations.forEach(mutation => {\n            mutation.addedNodes.forEach(node => {\n                setup(node);\n            });\n        });\n    });\n\n    // Watch for new inputs added\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n    });\n\n    // Setup\n    setup();\n});\n"]}